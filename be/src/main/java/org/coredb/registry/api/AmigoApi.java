/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.registry.api;

import org.coredb.registry.model.AmigoMessage;
import org.coredb.registry.model.Result;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.core.io.InputStreamResource;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "amigo", description = "the amigo API")
public interface AmigoApi {

    @ApiOperation(value = "", nickname = "getId", notes = "Get id associated with handle", response = String.class, tags={ "amigo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class) })
    @RequestMapping(value = "/amigo/id",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getId(@NotNull @ApiParam(value = "handle to validate", required = true) @Valid @RequestParam(value = "handle", required = true) String handle, @ApiParam(value = "wrap response") @Valid @RequestParam(value = "wrap", required = false) Boolean wrap);

    @ApiOperation(value = "", nickname = "getMessage", notes = "Retrieve amigo message associated with handle", response = AmigoMessage.class, tags={ "amigo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoMessage.class),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/amigo/messages",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AmigoMessage> getMessage(@ApiParam(value = "referenced id") @Valid @RequestParam(value = "amigoId", required = false) String amigoId,@ApiParam(value = "referenced handle") @Valid @RequestParam(value = "handle", required = false) String handle);


    @ApiOperation(value = "", nickname = "getRevision", notes = "Retrieve revision of current amigo message", response = Integer.class, tags={ "amigo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/amigo/messages/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getRevision(@ApiParam(value = "referenced id") @Valid @RequestParam(value = "amigoId", required = false) String amigoId,@ApiParam(value = "referenced handle") @Valid @RequestParam(value = "handle", required = false) String handle);


    @ApiOperation(value = "", nickname = "getLogo", notes = "Retrieve logo from current amigo message", response = Integer.class, tags={ "amigo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/amigo/messages/logo",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<InputStreamResource> getLogo(@ApiParam(value = "referenced id") @Valid @RequestParam(value = "amigoId", required = false) String amigoId,@ApiParam(value = "referenced handle") @Valid @RequestParam(value = "handle", required = false) String handle);


    @ApiOperation(value = "", nickname = "getName", notes = "Retrieve name from current amigo message", response = Integer.class, tags={ "amigo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/amigo/messages/name",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getName(@ApiParam(value = "referenced id") @Valid @RequestParam(value = "amigoId", required = false) String amigoId,@ApiParam(value = "referenced handle") @Valid @RequestParam(value = "handle", required = false) String handle);


    @ApiOperation(value = "", nickname = "getStatus", notes = "Check if handle is available", response = Result.class, tags={ "amigo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Result.class) })
    @RequestMapping(value = "/amigo/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Result> getStatus(@NotNull @ApiParam(value = "handle to validate", required = true) @Valid @RequestParam(value = "handle", required = true) String handle,@ApiParam(value = "id of requesting amigo") @Valid @RequestParam(value = "amigoId", required = false) String amigoId);


    @ApiOperation(value = "", nickname = "setBatch", notes = "Send updated amigo message batch", response = String.class, responseContainer = "List", tags={ "amigo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "invalid message"),
        @ApiResponse(code = 406, message = "handle already taken"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/amigo/messages/batch",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<String>> setBatch(@ApiParam(value = "amigo to message to update"  )  @Valid @RequestBody List<AmigoMessage> body);


    @ApiOperation(value = "", nickname = "setMessage", notes = "Send updated amigo message", tags={ "amigo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/amigo/messages",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> setMessage(@ApiParam(value = "amigo to message to update" ,required=true )  @Valid @RequestBody AmigoMessage body);

}

