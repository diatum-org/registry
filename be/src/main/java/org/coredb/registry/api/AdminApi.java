/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.registry.api;

import org.coredb.registry.model.SystemStat;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "admin", description = "the admin API")
public interface AdminApi {

    @ApiOperation(value = "", nickname = "adminServerStat", notes = "Set server system stat record", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/server/stats",
        method = RequestMethod.POST)
    ResponseEntity<Void> adminServerStat(@NotNull @Min(0) @Max(100) @ApiParam(value = "time", required = true, allowableValues = "") @Valid @RequestParam(value = "processor", required = true) Integer processor,@NotNull @ApiParam(value = "current memory free", required = true) @Valid @RequestParam(value = "memory", required = true) Long memory,@NotNull @ApiParam(value = "current storage free", required = true) @Valid @RequestParam(value = "storage", required = true) Long storage,@ApiParam(value = "access token") @Valid @RequestParam(value = "token", required = false) String token);


    @ApiOperation(value = "", nickname = "adminServerStats", notes = "Retrieve server system status", response = SystemStat.class, responseContainer = "List", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SystemStat.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/server/stats",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<SystemStat>> adminServerStats(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token,@ApiParam(value = "offset into record set") @Valid @RequestParam(value = "offset", required = false) Integer offset,@ApiParam(value = "max size of record set") @Valid @RequestParam(value = "limit", required = false) Integer limit);

}
